package com.wizardfight.achievement.achievementsTypes;

import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.games.Games;
import com.wizardfight.fight.FightCore;
import org.w3c.dom.Node;


/**
 * Created by 350z6233 on 15.04.2015.
 */

public abstract class Achievement{
    /**
     * Id is a unique string that is generated by the Google Play Developer Console.
     *           Used to indicate your progress in the game.
     */
    private final String ID;
    /**
     * Name of achievement, which is used to debug.
     */
    private final String Name;
    /**
     * Object reference GoogleApiClient, which will be connected to the server.
     */
    private final GoogleApiClient mGoogleApiClient;

    /**
     * Constructor of abstract class Achievement, which can parse xml.
     * Fills the fields: {@link #ID}, {@link #Name}, {@link #mGoogleApiClient}.
     * @param googleApiClient Object reference GoogleApiClient, which will be connected to the server.
     * @param node Node of xml.
     * @throws IllegalArgumentException If ID or mGoogleApiClient is null. Or if the length of ID is not 18 characters.
     */
    Achievement(GoogleApiClient googleApiClient, Node node) throws IllegalArgumentException {
        ID = node.getAttributes().getNamedItem("id").getNodeValue();
        Name = node.getAttributes().getNamedItem("name").getNodeValue();
        if((ID==null)||(ID.length()!=18)){
            throw new IllegalArgumentException("Id of achievement does not meet the requirements.");
        }
        if(googleApiClient==null){
            throw new IllegalArgumentException("mGoogleApiClient is null.");
        }
        this.mGoogleApiClient = googleApiClient;
    }

    /**
     * Increments the steps of the achievement for the currently authenticated player.
     * @param count The number of steps to increment. Autocheck for count > 0
     */
    void increment(int count){
        if (count>0&&mGoogleApiClient.isConnected()) {
            Games.Achievements.increment(mGoogleApiClient, ID, count);
        }
    }

    /**
     * Unlocks this achievement for the currently authenticated player.
     */
    public void unlock(){
        if (mGoogleApiClient.isConnected()) {
            Games.Achievements.unlock(mGoogleApiClient, ID);
        }
    }

    /**
     * This method is called on fight starts.
     * @param fc link to FightCore of this fight
     */
    void onStart(FightCore fc){}

    /**
     * This method is called whenever the observed FightCore is changed.
     * @param fc Link to FightCore of this fight
     * @param action Action that changed the FightCore.
     */
    public void update(FightCore fc, FightCore.CoreAction action) {
        if(action == FightCore.CoreAction.CM_FIGHT_START){
            onStart(fc);
        }
        if(action == FightCore.CoreAction.CM_FIGHT_END){
            onFinish(fc);
        }

    }

    /**
     * This method is called on fight ends.
     * @param fc link to FightCore of this fight
     */
    void onFinish(FightCore fc){}

    @Override
    public String toString() {
        return "Achievement{" +
                "mGoogleApiClient='" + mGoogleApiClient + '\'' +
                ", ID='" + ID + '\'' +
                ", Name='" + Name + '\'' +
                '}';
    }
}
